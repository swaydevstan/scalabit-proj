name: Deploy App to k3s

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
#   BuildScanPush:
#     runs-on: ubuntu-latest
#     env:
#        IMAGE_TAG: europe-west2-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/scalabit-repo/scalabit-api:${{ github.sha }}

#     steps:
#       - uses: actions/checkout@v4

#       - name: Authenticate to Google Cloud
#         uses: google-github-actions/auth@v2
#         with:
#             project_id: ${{ secrets.GCP_PROJECT_ID }}
#             workload_identity_provider: ${{ secrets.WIF_PROVIDER }}

#       - name: Setup gcloud
#         uses: google-github-actions/setup-gcloud@v2

#       - name: Configure Docker for Artifact Registry
#         run: gcloud auth configure-docker europe-west2-docker.pkg.dev

#       - name: Build Docker Image
#         run: |
#             cd ${{ github.workspace }}/app
#             docker build -t scalabit-api:${{ github.sha }} .

#       - name: Scan Docker Image
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: scalabit-api:${{ github.sha }}
#           format: 'table'
#           ignore-unfixed: true
#           severity: 'HIGH,CRITICAL'

#       - name: Push Image to Artifact Registry
#         run: |
#             docker tag scalabit-api:${{ github.sha }} $IMAGE_TAG
#             docker push $IMAGE_TAG
  DeployApp:
    runs-on: ubuntu-latest
    # needs: BuildScanPush
    env:
       IMAGE_TAG: europe-west2-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/scalabit-repo/scalabit-api:e733c765e0b142b5ae42101ac827490a7056ba33

    steps:
      - uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
            credentials_json: ${{ secrets.SA_USE }}
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Generate temporary SSH key
        run: |
          ssh-keygen -t rsa -f /tmp/temp_ssh_key -N ""
          chmod 600 /tmp/temp_ssh_key
          gcloud compute os-login ssh-keys add --key-file /tmp/temp_ssh_key.pub --project ${{ secrets.GCP_PROJECT_ID }}
  
      - name: Copy Manifests to VM via IAP
        run: |
          gcloud compute scp --zone ${{ vars.GCP_ZONE }} \
            --tunnel-through-iap \
            --ssh-key-file /tmp/temp_ssh_key \
            manifests/ ${{ secrets.VM_NAME }}:~/manifests/ \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Clean up temporary SSH key
        if: always()
        run: |
          rm /tmp/temp_ssh_key /tmp/temp_ssh_key.pub


      # - name: Deploy App
      #   env:
      #     VM_NAME: ${{ secrets.VM_NAME }}
      #     ZONE: ${{ vars.GCP_ZONE }}
      #     PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      #   run: |

      #       # Get k3s kubeconfig
      #       gcloud compute ssh "$VM_NAME" \
      #       --zone="$ZONE" \
      #       --tunnel-through-iap \
      #       --command="sudo cat /etc/rancher/k3s/k3s.yaml" > kubeconfig.yaml
            
      #       # Update server address
      #       sed -i 's/127.0.0.1/$(gcloud compute instances describe "$VM_NAME" --zone="$ZONE" --format="get(networkInterfaces[0].networkIP)")/g' kubeconfig.yaml
            
      #       export KUBECONFIG=./kubeconfig.yaml
            
      #       # Update image in deployment manifest
      #       sed -i "s|IMAGE_PLACEHOLDER|$IMAGE_TAG|g" manifests/deployment.yaml
            
      #       # Apply manifests
      #       kubectl apply -f manifests/
            
      #       # Wait for rollout
      #       kubectl rollout status deployment/node-app -n production --timeout=300s